---
- name: LoadBalancer tests
  module_defaults:
    opentelekomcloud.cloud.loadbalancer:
      cloud: "{{ test_cloud }}"
  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Set initial facts
      ansible.builtin.set_fact:
        network_name: "{{ ( prefix + '_acc-lb-network') }}"
        subnet_name: "{{ ( prefix + '_acc-lb-subnet') }}"
        router_name: "{{ ( prefix + '_acc-lb-router') }}"
        loadbalancer_name: "{{ ( prefix + '_acc-lb') }}"
        listener_name: "{{ ( prefix + '_acc-lb-lstnr') }}"
        pool_name: "{{ ( prefix + '_acc-lb-pool') }}"

    - name: Create network for ELB
      openstack.cloud.network:
        name: "{{ network_name }}"
        state: present
      register: lb_net

    - name: Create subnet for ELB
      openstack.cloud.subnet:
        name: "{{ subnet_name }}"
        state: present
        network_name: "{{ lb_net.network.name }}"
        cidr: "192.168.110.0/24"
        dns_nameservers: "{{ ['100.125.4.25', '8.8.8.8'] }}"
      register: lb_net_subnet

    - name: Create Router for ELB
      openstack.cloud.router:
        name: "{{ router_name }}"
        state: present
        network: admin_external_net
        enable_snat: "{{ has_snat | ternary(true, omit) }}"
        interfaces:
          - net: "{{ lb_net.network.name }}"
            subnet: "{{ lb_net_subnet.subnet.name }}"
      register: lb_net_router

    - name: Create loadbalancer - check mode
      opentelekomcloud.cloud.loadbalancer:
        state: present
        name: "{{ loadbalancer_name }}"
        vip_subnet: "{{ subnet_name }}"
        timeout: 150
      register: loadbalancer_check
      check_mode: true

    - name: Assert result
      ansible.builtin.assert:
        that:
          - loadbalancer_check is changed

    - name: Create loadbalancer
      opentelekomcloud.cloud.loadbalancer:
        state: present
        name: "{{ loadbalancer_name }}"
        vip_subnet: "{{ subnet_name }}"
        timeout: 150
      register: lb

    - name: Assert result
      ansible.builtin.assert:
        that:
          - lb is success
          - lb is changed

    - name: Assign EIP to existing loadbalancer
      opentelekomcloud.cloud.loadbalancer:
        name: "{{ loadbalancer_name }}"
        state: present
        vip_subnet: "{{ subnet_name }}"
        auto_public_ip: true
        wait: true
        timeout: 600

    - name: Get loadbalancers list through vlb provider
      opentelekomcloud.cloud.loadbalancer_v3_info:
      register: loadbalancers

    - name: Assert result
      ansible.builtin.assert:
        that:
          - loadbalancers is success
          - loadbalancers is not changed
          - loadbalancers | length > 0

    - name: Get loadbalancer by Name
      opentelekomcloud.cloud.loadbalancer_info:
        name: "{{ lb.loadbalancer.name }}"
      register: res

    - name: Assert result
      ansible.builtin.assert:
        that:
          - res is success
          - res.loadbalancers is defined
          - res.loadbalancers.id is defined
          - res.loadbalancers.vip_address is defined

    - name: Get loadbalancer by Name through vlb provider
      opentelekomcloud.cloud.loadbalancer_v3_info:
        name: "{{ lb.loadbalancer.name }}"
      register: res

    - name: Assert result
      ansible.builtin.assert:
        that:
          - res is success
          - res.loadbalancers is defined
          - res.loadbalancers.id is defined
          - res.loadbalancers.vip_address is defined

    - name: Create listener for existing loadbalancer
      opentelekomcloud.cloud.lb_listener:
        state: present
        protocol_port: 80
        protocol: tcp
        loadbalancer: "{{ lb.loadbalancer.id }}"
        name: "{{ listener_name }}"
      register: lstnr

    - name: Assert result
      ansible.builtin.assert:
        that:
          - lstnr is success
          - lstnr is changed

    - name: Modify existing listener
      opentelekomcloud.cloud.lb_listener:
        state: present
        description: changed
        name: "{{ listener_name }}"
      register: lstnr

    - name: Assert result
      ansible.builtin.assert:
        that:
          - lstnr is success
          - lstnr is changed

    - name: Get listener by name
      opentelekomcloud.cloud.lb_listener_info:
        name: "{{ lstnr.listener.name }}"
      register: res

    - name: Assert result
      ansible.builtin.assert:
        that:
          - res is success
          - res.listeners is defined
          - res.listeners[0].id is defined

    - name: Create Backend Server Group
      opentelekomcloud.cloud.lb_pool:
        state: present
        name: "{{ pool_name }}"
        protocol: tcp
        lb_algorithm: round_robin
        listener: "{{ lstnr.listener.id }}"
        loadbalancer: "{{ lb.loadbalancer.id }}"
      register: pool

    - name: Assert result
      ansible.builtin.assert:
        that:
          - pool is success
          - pool is changed

    - name: Modify Backend Server Group
      opentelekomcloud.cloud.lb_pool:
        state: present
        name: "{{ pool_name }}"
        session_persistence:
          cookie_name: app
          type: app_cookie
      register: pool

    - name: Assert result
      ansible.builtin.assert:
        that:
          - pool is success
          - pool is changed

    - name: Get Backend Server Group by name
      opentelekomcloud.cloud.lb_pool_info:
        name: "{{ pool.server_group.name }}"
      register: res

    - name: Assert result
      ansible.builtin.assert:
        that:
          - res is success
          - res.server_groups is defined
          - res.server_groups[0].id is defined

    - name: Drop existing pool by name
      opentelekomcloud.cloud.lb_pool:
        state: absent
        name: "{{ pool_name }}"
      register: dropped

    - name: Assert result
      ansible.builtin.assert:
        that:
          - dropped is success
          - dropped is changed

    - name: Drop existing listener by name
      opentelekomcloud.cloud.lb_listener:
        state: absent
        name: "{{ listener_name }}"
      register: dropped

    - name: Assert result
      ansible.builtin.assert:
        that:
          - dropped is success
          - dropped is changed

    - name: Drop existing loadbalancer
      opentelekomcloud.cloud.loadbalancer:
        # pass ID as name
        name: "{{ lb.loadbalancer.id }}"
        state: absent
        delete_public_ip: true
        delete_cascade: true
      register: dropped

    - name: Assert result
      ansible.builtin.assert:
        that:
          - dropped is success
          - dropped is changed

    - name: Drop not more existing loadbalancer
      opentelekomcloud.cloud.loadbalancer:
        # pass ID as name
        name: "{{ lb.loadbalancer.id }}"
        state: absent
      register: dropped

    - name: Assert result
      ansible.builtin.assert:
        that:
          - dropped is success
          - dropped is not changed

  always:
    - name: Cleanup
      block:
        - name: Drop perhaps existing loadbalancer
          opentelekomcloud.cloud.loadbalancer:
            name: "{{ lb.loadbalancer.id }}"
            state: absent
            delete_public_ip: true
            delete_cascade: true
          register: removed
          until: removed is not failed
          ignore_errors: true
          retries: 10

        - name: Drop existing Router
          openstack.cloud.router:
            name: "{{ router_name }}"
            state: absent
          register: removed
          until: removed is not failed
          ignore_errors: true
          retries: 10

        - name: Drop existing subnet
          openstack.cloud.subnet:
            name: "{{ subnet_name }}"
            state: absent
          register: removed
          until: removed is not failed
          ignore_errors: true
          retries: 10

        - name: Drop existing network
          openstack.cloud.network:
            name: "{{ network_name }}"
            state: absent
          register: removed
          until: removed is not failed
          ignore_errors: true
          retries: 10
