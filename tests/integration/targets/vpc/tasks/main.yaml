---
- name: VPC Tests
  module_defaults:
    opentelekomcloud.cloud.vpc:
      cloud: "{{ test_cloud }}"

  block:
    - name: Set random prefix
      ansible.builtin.set_fact:
        prefix: "{{ 99999999 | random | to_uuid | hash('md5') }}"

    - name: Assigning Floating IP
      opentelekomcloud.cloud.floating_ip:
        network: admin_external_net
      register: fl

    - name: Set initial facts
      ansible.builtin.set_fact:
        vpc_name: "{{ ( prefix + '_vpc') }}"
        cidr: "192.168.0.0/24"
        bandwidth_name: "{{ ( prefix + '_bandwidth') }}"

    - name: Create VPC
      opentelekomcloud.cloud.vpc:
        name: "{{ vpc_name }}"
        cidr: "{{ cidr }}"
        state: present
      check_mode: true
      register: vpc_check_mode

    - name: Assert result
      ansible.builtin.assert:
        that:
          - vpc_check_mode is success
          - vpc_check_mode is not changed

    - name: Create VPC
      opentelekomcloud.cloud.vpc:
        name: "{{ vpc_name }}"
        cidr: "{{ cidr }}"
        enable_shared_snat: true
        state: present
      register: vpc

    - name: Assert result
      ansible.builtin.assert:
        that:
          - vpc is success
          - vpc is changed
          - vpc.vpc.enable_shared_snat is true

    - name: Assign bandwidth
      opentelekomcloud.cloud.bandwidth:
        name: "{{ bandwidth_name }}"
        size: 15
      register: created_bandwidth

    - name: assert result
      ansible.builtin.assert:
        that:
          - created_bandwidth is success
          - created_bandwidth is defined

    - name: Set random prefix
      ansible.builtin.set_fact:
        bandwidth_id: "{{ created_bandwidth.bandwidth.id }}"

    - name: Add eip to bandwidth
      opentelekomcloud.cloud.associate_bandwidth:
        name: "{{ bandwidth_name }}"
        publicip_id: "{{ fl.floating_ip.id }}"
      register: bandwidth

    - name: assert result
      ansible.builtin.assert:
        that:
          - bandwidth is success
          - bandwidth is defined

    - name: Remove eip from bandwidth
      opentelekomcloud.cloud.associate_bandwidth:
        name: "{{ bandwidth_name }}"
        publicip_id: "{{ fl.floating_ip.id }}"
        size: 10
        charge_mode: "traffic"
        state: absent
      register: bandwidth

    - name: assert result
      ansible.builtin.assert:
        that:
          - bandwidth is success
          - bandwidth is defined

    - name: Update bandwidth
      opentelekomcloud.cloud.bandwidth:
        name: "{{ bandwidth_id }}"
        size: 14
      register: bandwidth

    - name: assert result
      ansible.builtin.assert:
        that:
          - bandwidth is success
          - bandwidth is defined
          - bandwidth.bandwidth['size'] == 14

    - name: Update VPC
      opentelekomcloud.cloud.vpc:
        name: "{{ vpc_name }}"
        description: "Test vpc"
      register: updated_vpc

    - name: Assert result
      ansible.builtin.assert:
        that:
          - updated_vpc is success
          - updated_vpc is defined

  always:
    - name: Cleanup
      block:
        - name: Drop floating ip
          opentelekomcloud.cloud.floating_ip:
            floating_ip_address: "{{ fl.floating_ip.floating_ip_address }}"
            state: absent
            purge: true
          failed_when: false

        - name: Delete bandwidth
          opentelekomcloud.cloud.bandwidth:
            name: "{{ bandwidth_id }}"
            state: absent
          retries: 5
          failed_when: false

        - name: Delete VPC
          opentelekomcloud.cloud.vpc:
            name: "{{ vpc_name }}"
            state: "absent"
          failed_when: false
